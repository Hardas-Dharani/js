# import PyPDF2
# import os

# # --------------------
# # read pdf files
# # --------------------

# # os.chdir("c:\\users\\crisp\\Documents") #pdf file location, if not in cwd
# pdfFile = open("80188.pdf", "rb")  # rb: read binary mode
# reader = PyPDF2.PdfFileReader(pdfFile)
# print(reader.numPages)
# page = reader.getPage(0)
# print(page.extractText())

# # for all pages
# for pageNum in range(reader.numPages):
#     print(reader.getPage(pageNum).extractText())

# from PyPDF2 import PdfReader
# import json
# reader = PdfReader("80188.pdf")
# number_of_pages = len(reader.pages)
# page = reader.pages[0]
# text = page.extract_text()
# print(text)
# print(json.dumps(text))
# from io import StringIO
# from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
# from pdfminer.converter import TextConverter
# from pdfminer.layout import LAParams
# from pdfminer.pdfpage import PDFPage

# def extract_text_from_pdf(pdf_file, password=''):
#     resource_manager = PDFResourceManager()
#     string_io = StringIO()
#     converter = TextConverter(resource_manager, string_io,  laparams=LAParams())
#     page_interpreter = PDFPageInterpreter(resource_manager, converter)
    
#     with open(pdf_file, 'rb') as file:
#         for page in PDFPage.get_pages(file, check_extractable=True, password=password):
#             page_interpreter.process_page(page)
#         text = string_io.getvalue()
    
#     # Clean up resources
#     converter.close()
#     string_io.close()
    
#     return text



# url = "https://cdn.jsdelivr.net/gh/hardas-dharani/js/80188.pdf"
# pdf_file = "80188.pdf"
# text = extract_text_from_pdf(pdf_file)
# print(text)

# import PyPDF2
# import re
# import json

# # Open the PDF file
# pdf_file = PyPDF2.PdfFileReader(open("80188.pdf", "rb"))

# # Read the contents of the first page of the PDF file
# pdf_content = pdf_file.getPage(0).extractText()

# lines = pdf_content.split('\n')

# # remove empty lines
# lines = [line for line in lines if line.strip()]

# # key-value pairs
# pairs = [line.split(': ') for line in lines if ': ' in line]

# # dictionary
# result = {k: v for k, v in pairs}

# print(result)
# # print the extracted information
# print(patient_data)

# import fitz
# import re

# def extract_pdf_data(pdf_file):
#     doc = fitz.open(pdf_file)
#     data = {}
#     print(doc)
#     for page in doc:
#         if page.number ==0:
#             s=page.get_text('text')
#             text = page.get_text("text").split("\n \n")
#             print(text)
#             substrings = [[substring for substring in string.split("\n")] for string in text]
#             result = [substring for sublist in substrings for substring in sublist]
#             results = [string for string in result  if len(string.strip()) > 0]
#             text_q = page.get_text("text").split("\n")
#             resultss = {}
#             try:
#                 for line in results:
#                     line = line.strip()
#                     if not line:
#                         continue
                
#                     key_value = re.split(":|#", line)
#                     key_value = [string for string in key_value  if len(string.strip()) > 0]
#                     if '-' not in key_value[0]:
#                         print(len(key_value[0]))
#                         if len(key_value )==1:
#                             words = key_value[0].split()
#                             # count the number of words
#                             countResult = len(words)
#                             if countResult == 2:
#                                 key_value= key_value[0].split(' ')
#                             elif countResult >2:
#                                 key_value= key_value[0].split(' ')
#                         for i in range(0, len(key_value), 2):
#                             key = key_value[i]
#                             value = key_value[i + 1]
#                             resultss[key] = value
                    
#                     # key_values = line.split(":", 1)
#                     # if len(key_value) == 2:
#                     #     key, value = key_value
#                     #     key = key.strip()
#                     #     value = value.strip()
#                     #     data[key] = value
#             except Exception as e: 
#                 print(e)
#                 pass
    
#     return data

# pdf_file = "80188.pdf"
# data = extract_pdf_data(pdf_file)
# print(data)



import re
from io import StringIO
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.converter import TextConverter
from pdfminer.layout import LAParams
from pdfminer.pdfpage import PDFPage
def extract_data_dynamically(pdf_path):
    resource_manager = PDFResourceManager()
    fake_file_handle = StringIO()
    converter = TextConverter(resource_manager, fake_file_handle, codec='utf-8', laparams=LAParams())
    page_interpreter = PDFPageInterpreter(resource_manager, converter)

    form_data = {}
    text = ''
    with open(pdf_path, 'rb') as fh:
        for page in PDFPage.get_pages(fh, caching=True, check_extractable=True):
            page_interpreter.process_page(page)
            text += fake_file_handle.getvalue()

    # Extract relevant information from the text
    lines = text.strip().split('\n')
    for line in lines:
        match = re.search(r'(\w+):\s+(.+)', line)
        if match:
            form_data[match.group(1).strip()] = match.group(2).strip()

    # close open handles
    converter.close()
    fake_file_handle.close()

    return form_data

form_data = extract_data_dynamically('80188.pdf')
print(form_data)
